import numpy as np
from sklearn.datasets import load_iris

def chi2(X: np.ndarray, y: np.ndarray) -> float:
    """
    Calculate the chi-square statistic between each feature and the target.
    """
    classes = sorted(set(y))
    class_to_index = {c: i for i, c in enumerate(classes)}
    Y = [[1 if class_to_index[cls] == i else 0 for i in range(len(classes))] for cls in y]
    
    if len(classes) == 1:
        Y = [[1-yi[0], yi[0]] for yi in Y]
    
    def sparse_dot_product(A, B):
        return [[sum(a * b for a, b in zip(row, col)) for col in zip(*B)] for row in A]
    
    observed = sparse_dot_product(list(map(list, zip(*Y))), X)
    
    feature_count = [sum(feature) for feature in zip(*X)]
    class_prob = [sum(yi) / len(Y) for yi in zip(*Y)]
    
    expected = sparse_dot_product([[cp] for cp in class_prob], [feature_count])
    
    def chi_square(observed, expected):
        chi2_stat = 0
        for i, obs_row in enumerate(observed):
            exp_row = expected[i]
            for obs_val, exp_val in zip(obs_row, exp_row):
                if exp_val > 0:  # To avoid division by zero
                    chi2_stat += (obs_val - exp_val) ** 2 / exp_val
        return chi2_stat
    
    return chi_square(observed, expected)

def main():
    # Load the dataset
    data = load_iris()
    X, y = data.data, data.target
    
    # Calculate chi-square
    chi2_score = chi2(X, y)
    print("Chi-square score:", chi2_score)

if __name__ == "__main__":
    main()